package graph;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * Implementation of Delaunay triangulation needed for generating a planar graph.
 * @author martin
 *
 */
public class DTriangulation {
	private List<Node> points;
	
	public DTriangulation() {
		
	}
	
	public DTriangulation(List<Node> points) {
		this.points = points;
	}

	public List<Connection> triangulate(List<Node> points, boolean weighted) {
		this.points = points;
		return triangulate(weighted);
	}
	
	public List<Connection> triangulate(boolean weighted) {
		List<Connection> connections = new ArrayList<Connection>();
		int n = points.size();
		for (int i = 0; i < n; i++)
			for (int j = i + 1; j < n; j++)
				for (int k = j + 1; k < n; k++) {
					boolean isTriangle = true;
					for (int a = 0; a < n; a++) {
						if (a == i || a == j || a == k)
							continue;
						if (this.inside(points.get(a), points.get(i), points.get(j), points.get(k))) {
							isTriangle = false;
							break;
						}
					}
					if (isTriangle) {
						Connection con1 = null;
						Connection con2 = null;
						Connection con3 = null;
						if (weighted) {
							Random random = new Random();
							con1 = new Connection(random.nextInt(100)+1, points.get(i), points.get(j));
							con2 = new Connection(random.nextInt(100)+1, points.get(i), points.get(k));
							con3 = new Connection(random.nextInt(100)+1, points.get(j), points.get(k));
						}
						else {
							con1 = new Connection(100, points.get(i), points.get(j));
							con2 = new Connection(100, points.get(i), points.get(k));
							con3 = new Connection(100, points.get(j), points.get(k));
						}
						connections.add(con1);
						connections.add(con2);
						connections.add(con3);
					}

				}
		return connections;
	}

	public MyPoint getTriangleCircumcenter(Node a, Node b, Node c) {
		Node midAB = new Node(0, (a.getX() + b.getX()) / 2, (a.getY() + b.getY()) / 2);
		System.out.println("midAB: " + midAB.getX() + " " + midAB.getY());
		Node midBC = new Node(0, (b.getX() + c.getX()) / 2, (b.getY() + c.getY()) / 2);
		System.out.println("midBC: " + midBC.getX() + " " + midBC.getY());

		double slopeAB = -1 / ((b.getY() - a.getY()) / (b.getX() - a.getX()));
		double slopeBC = -1 / ((c.getY() - b.getY()) / (c.getX() - b.getX()));

		double bAB = midAB.getY() - slopeAB * midAB.getX();
		double bBC = midBC.getY() - slopeBC * midBC.getX();

		double x = (bAB - bBC) / (slopeBC - slopeAB);

		return new MyPoint(x, (slopeAB * x) + bAB);
	}

	public MyPoint getTriangleCircumcenter1(Node a, Node b, Node c) {
		double dA = Math.pow(a.getX(), 2) + Math.pow(a.getY(), 2);
		double dB = Math.pow(b.getX(), 2) + Math.pow(b.getY(), 2);
		double dC = Math.pow(c.getX(), 2) + Math.pow(c.getY(), 2);
		double ox1 = dA * (c.getY() - b.getY()) + dB * (a.getY() - c.getY()) + dC * (b.getY() - a.getY());
		double ox2 = 2 * (a.getX() * (c.getY() - b.getY()) + b.getX() * (a.getY() - c.getY())
				+ c.getX() * (b.getY() - a.getY()));

		double oy1 = -(dA * (c.getX() - b.getX()) + dB * (a.getX() - c.getX()) + dC * (b.getX() - a.getX()));
		double oy2 = ox2;

		double ox = ox1 / ox2;
		double oy = oy1 / oy2;

		return new MyPoint(ox, oy);

	}

	public boolean inside(Node i, Node a, Node b, Node c) {
		MyPoint center = this.getTriangleCircumcenter1(a, b, c);
		System.out.println("Center: " + center.getX() + " " + center.getY());
		double distance = center.distanceTo(new MyPoint(a.getX(), a.getY()));
		System.out.println("Distance: " + distance);
		System.out.println("center.x - dist: " + (center.getX() - distance));
		System.out.println("center.x + dist: " + (center.getX() + distance));
		System.out.println("center.y - dist: " + (center.getY() - distance));
		System.out.println("center.y + dist: " + (center.getY() + distance));
		System.out.println("First: " + (i.getX() > (center.getX() - distance)));
		System.out.println("Second: " + (i.getX() < (center.getX() + distance)));
		System.out.println("Third: " + (i.getY() > (center.getY() - distance)));
		System.out.println("Fourth: " + (i.getY() < (center.getY() + distance)));
		if ((i.getX() > (center.getX() - distance) && i.getX() < (center.getX() + distance))
				&& (i.getY() > (center.getY() - distance) && i.getY() < (center.getY() + distance))) {
			return true;
		}
		return false;
	}
}

class MyPoint {
	private double x;
	private double y;

	public MyPoint(double x, double y) {
		this.setX(x);
		this.setY(y);
	}

	public double getX() {
		return x;
	}

	public void setX(double x) {
		this.x = x;
	}

	public double getY() {
		return y;
	}

	public void setY(double y) {
		this.y = y;
	}

	public double distanceTo(MyPoint t) {
		double xx = Math.pow(x - t.getX(), 2);
		double yy = Math.pow(y - t.getY(), 2);
		return Math.sqrt(xx + yy);
	}
}